{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,KAAOC,SAASC,cAAc,SAC9BC,WAAaF,SAASC,cAAc,uBACpCE,UAAYH,SAASC,cAAc,sBACnCG,YAAcJ,SAASC,cAAc,yBAQvC,SAASI,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAGpBA,E,IAIP,SAASQ,EAAaC,GACpBA,EAAIC,iBAKJ,IAJA,IAAIC,EAAQC,SAASrB,EAAKI,WAAWkB,OAC/BC,EAAOF,SAASrB,EAAKK,UAAUiB,OAC/BE,EAASH,SAASrB,EAAKM,YAAYgB,OAEhCG,EAAW,EAAGA,GAAYD,EAASC,GAAW,EAErDlB,EAAckB,EAAUL,GACvBM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBX,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAE9DsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBX,EAAA8B,OAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAG5DW,GAASG,C,CArCbvB,EAAKC,KAAKgC,iBAAiB,SAAUhB,GACrCjB,EAAKI,WAAW6B,iBAAiB,SAAUhB,GAC3CjB,EAAKK,UAAU4B,iBAAiB,SAAUhB,GAC1CjB,EAAKM,YAAY2B,iBAAiB,SAAUhB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport '../css/common.css';\n\nconst refs = {\n  form : document.querySelector('.form'),\n  inputDelay : document.querySelector('input[name=\"delay\"]'),\n  inputStep : document.querySelector('input[name=\"step\"]'), \n  inputAmount : document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\nrefs.inputDelay.addEventListener('submit', onFormSubmit);\nrefs.inputStep.addEventListener('submit', onFormSubmit);\nrefs.inputAmount.addEventListener('submit', onFormSubmit);\n\nfunction createPromise(position, delay) {\n  \n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n      \n    }, delay);\n  });\n};\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  let delay = parseInt(refs.inputDelay.value);\n  const step = parseInt(refs.inputStep.value);\n  const amount = parseInt(refs.inputAmount.value);\n  \n  for (let position = 1; position <= amount;  position +=1) {\n    \n    createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    \n    delay += step;\n  }\n};\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","inputDelay","inputStep","inputAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$onFormSubmit","evt","preventDefault","delay1","parseInt","value","step","amount","position1","then","param","Notify","success","concat","catch","failure","addEventListener"],"version":3,"file":"03-promises.01ba5797.js.map"}